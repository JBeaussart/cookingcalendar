---
import Layout from "../layouts/Layout.astro";
---
<Layout title="Liste de courses (planning + custom)">
  <div class="mx-auto max-w-3xl px-4 py-6">
    <!-- En-t√™te -->
    <div class="mb-5 flex items-center justify-between gap-3">
      <h1 class="text-2xl font-bold text-gray-900">üõí Liste de courses</h1>

      <!-- Bouton Recharger (m√™me id) -->
      <button
        id="btnReload"
        class="inline-flex items-center gap-2 rounded-lg border border-gray-200 bg-white px-3 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 active:scale-[0.98] transition"
        title="Recalculer la liste depuis le planning"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4"
             viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M4 4v6h6M20 20v-6h-6M5 19A9 9 0 0119 5l1 1"/>
        </svg>
        Recharger
      </button>
    </div>

    <!-- Carte formulaire -->
    <div class="mb-6 rounded-2xl border border-gray-200 bg-white p-4 shadow-sm">
      <h2 class="mb-3 text-sm font-semibold text-gray-700">Ajouter un √©l√©ment</h2>
      <!-- Formulaire d‚Äôajout d‚Äôun √©l√©ment custom (m√™mes ids) -->
      <form id="addForm" class="grid grid-cols-1 gap-2 sm:grid-cols-4">
        <input id="fItem" type="text" placeholder="Nom"
               class="col-span-2 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-emerald-400"
               required />
        <input id="fQty" type="number" step="any" placeholder="Quantit√©"
               class="col-span-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-emerald-400" />
        <button type="submit"
                class="col-span-1 inline-flex items-center justify-center rounded-lg bg-emerald-600 px-3 py-2 text-sm font-medium text-white shadow hover:bg-emerald-700 active:scale-[0.98] transition">
          ‚ûï Ajouter
        </button>
      </form>
    </div>

    <!-- Carte liste -->
    <div class="rounded-2xl border border-gray-200 bg-white shadow-sm">
      <div class="px-3 sm:px-4 py-3 border-b border-gray-100">
        <h2 class="text-lg font-semibold text-gray-800">√âl√©ments</h2>
      </div>

      <ul id="list" class="divide-y divide-gray-100"></ul>
    </div>

    <p id="status" class="mt-3 text-sm text-gray-500"></p>
  </div>

  <script type="module">
    const listEl = document.getElementById("list");
    const statusEl = document.getElementById("status");
    const btnReload = document.getElementById("btnReload");
    const addForm = document.getElementById("addForm");
    const fItem = document.getElementById("fItem");
    const fQty = document.getElementById("fQty");

    let computed = [];
    let saved = [];
    let customs = [];
    let items = [];

    const makeKey = (it) =>
      `${String(it.item||"").trim().toLowerCase()}|||${String(it.unit||"").trim().toLowerCase()}`;

    function sortItems() {
      // tri : non coch√©s en haut, coch√©s en bas
      items.sort((a, b) => {
        if (a.checked === b.checked) return a.item.localeCompare(b.item, "fr");
        return a.checked ? 1 : -1;
      });
    }

    function render() {
      sortItems();
      listEl.innerHTML = "";
      if (!Array.isArray(items) || items.length === 0) {
        listEl.innerHTML = `<li class="px-4 py-6 text-center text-sm text-gray-600">Aucun √©l√©ment.</li>`;
        return;
      }

      items.forEach((row, idx) => {
        const isCustom = row.source === "custom";
        const hasQty = typeof row.quantity === "number" && !isNaN(row.quantity);
        // Affiche l‚Äôunit√© si disponible (ne change pas la logique existante)
        const txt = hasQty
          ? `${row.item} : ${row.quantity}${row.unit ? " " + row.unit : ""}`
          : row.item;

        const li = document.createElement("li");
        li.className =
          "group flex items-center justify-between gap-3 px-4 py-3 hover:bg-emerald-50/60 transition";

        li.innerHTML = `
          <label class="flex items-center gap-3 cursor-pointer select-none">
            <input type="checkbox"
                   class="peer h-5 w-5 shrink-0 rounded-md border-gray-300 text-emerald-600 focus:ring-2 focus:ring-emerald-400"
                   data-idx="${idx}" ${row.checked ? "checked" : ""}>
            <span class="text-[15px] ${row.checked ? "line-through text-gray-400" : "text-gray-800"}">
              ${txt}
            </span>
          </label>
          <div class="flex items-center gap-2">
            ${isCustom ? `
              <button class="del-btn rounded-md p-2 text-rose-600 hover:text-rose-700 hover:bg-rose-50 transition"
                      data-idx="${idx}" title="Supprimer">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5"
                     viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6M9 7h6m1 0H8m8 0l-1-3H9L8 7" />
                </svg>
              </button>
            ` : ``}
          </div>
        `;
        listEl.appendChild(li);
      });

      // Checkbox handlers (inchang√© c√¥t√© logique)
      listEl.querySelectorAll('input[type="checkbox"]').forEach(cb => {
        cb.addEventListener("change", async () => {
          const i = Number(cb.dataset.idx);
          items[i].checked = cb.checked;
          status("Enregistrement‚Ä¶");

          try {
            if (items[i].source === "custom") {
              await fetch("/api/custom-items", {
                method: "PATCH",
                headers: { "content-type": "application/json" },
                body: JSON.stringify({
                  item: items[i].item,
                  checked: items[i].checked
                })
              });
            } else {
              const payload = items
                .filter(it => it.source === "computed")
                .map(({source, ...rest}) => rest);

              await fetch("/api/save-shopping-totals", {
                method: "POST",
                headers: { "content-type": "application/json" },
                body: JSON.stringify({ items: payload })
              });
            }
            render(); // re-trie avec coch√©s en bas
            status("‚úÖ Sauvegard√©");
          } catch (e) {
            console.error(e);
            status("‚ùå Erreur d'enregistrement");
          }
        });
      });

      // Delete custom (inchang√© c√¥t√© logique)
      listEl.querySelectorAll(".del-btn").forEach(btn => {
        btn.addEventListener("click", async () => {
          const i = Number(btn.dataset.idx);
          const it = items[i];
          if (!it || it.source !== "custom") return;
          status("Suppression‚Ä¶");
          try {
            const params = new URLSearchParams({ item: it.item });
            const r = await fetch(`/api/custom-items?${params.toString()}`, { method: "DELETE" });
            await r.json();
            await load();
            status("‚úÖ Supprim√©");
          } catch (e) {
            console.error(e);
            status("‚ùå Erreur de suppression");
          }
        });
      });
    }

    function status(t) {
      statusEl.textContent = t || "";
    }

    async function load() {
      status("Chargement‚Ä¶");
      try {
        const [r1, r2, r3] = await Promise.all([
          fetch("/api/compute-shopping-totals"),
          fetch("/api/save-shopping-totals"),
          fetch("/api/custom-items"),
        ]);
        const [j1, j2, j3] = await Promise.all([r1.json(), r2.json(), r3.json()]);

        computed = (Array.isArray(j1.items) ? j1.items : []).map(it => ({ ...it, source: "computed" }));
        saved = Array.isArray(j2.items) ? j2.items : [];
        customs = (Array.isArray(j3.items) ? j3.items : []).map(it => ({ ...it, source: "custom" }));

        const idxByKey = new Map(computed.map((it, i) => [makeKey(it), i]));
        computed = computed.map(it => ({ ...it, checked: false }));
        for (const s of saved) {
          const idx = idxByKey.get(makeKey(s));
          if (idx != null) computed[idx].checked = !!s.checked;
        }

        items = [...computed, ...customs];

        status("OK");
        render();
      } catch (e) {
        console.error(e);
        status("‚ùå Erreur de chargement");
      }
    }

    // Ajout custom (inchang√© c√¥t√© logique)
    addForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const item = fItem.value.trim();
      const qtyRaw = fQty.value.trim();
      if (!item) return;

      status("Ajout‚Ä¶");
      try {
        const payload = { item };
        if (qtyRaw !== "") payload.quantity = Number(qtyRaw);

        await fetch("/api/custom-items", {
          method: "POST",
          headers: { "content-type": "application/json" },
          body: JSON.stringify(payload),
        });

        fItem.value = ""; fQty.value = "";
        await load();
        status("‚úÖ Ajout√©");
      } catch (e) {
        console.error(e);
        status("‚ùå Erreur d'ajout");
      }
    });

    btnReload.addEventListener("click", load);
    await load();
  </script>
</Layout>
