---
/* src/pages/index.astro (planning) */
import Layout from "../layouts/Layout.astro";
import { db } from "../firebase";
import {
  collection,
  getDocs,
  query,
  where,
  documentId,
} from "firebase/firestore";

const days = [
  "lundi",
  "mardi",
  "mercredi",
  "jeudi",
  "vendredi",
  "samedi",
  "dimanche",
];

// Lire planning (doc id = nom du jour, champ: recipeId)
const planningSnap = await getDocs(collection(db, "planning"));
const planningMap = new Map(
  planningSnap.docs.map((d) => [d.id, d.data()?.recipeId || ""]),
);

// Charger les recettes r√©f√©renc√©es (lotissement par 10)
const recipeIds = days.map((d) => planningMap.get(d) || "").filter(Boolean);
const recipesById = new Map();
if (recipeIds.length) {
  for (let i = 0; i < recipeIds.length; i += 10) {
    const chunk = recipeIds.slice(i, i + 10);
    const q = query(
      collection(db, "recipes"),
      where(documentId(), "in", chunk),
    );
    const snap = await getDocs(q);
    for (const d of snap.docs) {
      recipesById.set(d.id, { id: d.id, ...d.data() });
    }
  }
}

const entries = days.map((day) => {
  const rid = planningMap.get(day) || "";
  return { day, recipe: rid ? (recipesById.get(rid) ?? null) : null };
});
---

<Layout title="Planning">
  <div class="mx-auto max-w-5xl px-4 py-6 sm:py-8">
    <header class="mb-6 sm:mb-8 flex items-center justify-between gap-3">
      <div>
        <h1 class="text-2xl font-bold tracking-tight text-gray-900">
          üóìÔ∏è Planning de la semaine
        </h1>
        <p class="mt-1 text-sm text-gray-600">
          S√©lectionne une recette pour chaque jour.
        </p>
      </div>
      <form method="post" action="/api/clear-planning" class="shrink-0">
        <button
          type="submit"
          class="inline-flex items-center gap-2 rounded-lg bg-red-600 px-4 py-2.5 text-sm font-medium text-white shadow-sm transition hover:bg-red-700"
          title="Supprimer tout le planning"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            class="h-5 w-5"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
          R√©initialiser le planning
        </button>
      </form>
    </header>

    <div class="grid grid-cols-1 gap-4 sm:gap-5 md:grid-cols-2 lg:grid-cols-3">
      {
        entries.map(({ day, recipe }) => {
          const img =
            recipe?.image && String(recipe.image).trim()
              ? recipe.image
              : "/images/default-recipe.jpg";
          return (
            <section
              class="group rounded-xl border border-gray-200 bg-white shadow-sm transition hover:shadow-md js-planning-dropzone"
              data-day={day}
              data-current-recipe-id={recipe ? recipe.id : ""}
            >
              <div class="flex items-center justify-between px-4 py-3 border-b border-gray-100">
                <h2 class="text-base font-semibold capitalize text-gray-900">
                  {day}
                </h2>
                {recipe ? (
                  <span class="inline-flex items-center rounded-full bg-emerald-50 px-2.5 py-1 text-xs font-medium text-emerald-700">
                    Planifi√©
                  </span>
                ) : (
                  <span class="inline-flex items-center rounded-full bg-amber-50 px-2.5 py-1 text-xs font-medium text-amber-700">
                    √Ä choisir
                  </span>
                )}
              </div>

              {recipe ? (
                <div class="p-4">
                  <div
                    class="flex items-start gap-3 rounded-lg border border-transparent transition-colors cursor-grab active:cursor-grabbing hover:border-emerald-200 hover:bg-emerald-50/40 js-planning-draggable"
                    draggable="true"
                    data-day={day}
                    data-recipe-id={recipe.id}
                  >
                    <img
                      src={img}
                      alt={recipe.title}
                      class="h-16 w-16 flex-none rounded-lg object-cover ring-1 ring-gray-200"
                    />
                    <div class="min-w-0 flex-1">
                      <a
                        href={`/recipes/${recipe.id}`}
                        draggable="false"
                        class="block text-sm font-medium text-gray-900 hover:underline leading-snug"
                      >
                        {recipe.title}
                      </a>
                    </div>

                    <div class="flex shrink-0 items-center gap-2">
                      <a
                        href={`/recipes/${recipe.id}`}
                        title="Voir la recette"
                        draggable="false"
                        class="inline-flex h-9 w-9 items-center justify-center rounded-lg border border-gray-200 text-blue-600 hover:border-blue-300 hover:bg-blue-50 hover:text-blue-700 transition"
                      >
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          stroke-width="1.5"
                          class="h-5 w-5"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            d="M2.25 12s3.75-7.5 9.75-7.5S21.75 12 21.75 12s-3.75 7.5-9.75 7.5S2.25 12 2.25 12z"
                          />
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            d="M15 12a3 3 0 11-6 0 3 3 0 0 1 6 0z"
                          />
                        </svg>
                      </a>

                      <form
                        method="post"
                        action={`/api/remove-recipe?day=${day}`}
                        class="inline-flex"
                      >
                        <button
                          type="submit"
                          title="Retirer la recette"
                          draggable="false"
                          class="inline-flex h-9 w-9 items-center justify-center rounded-lg border border-gray-200 text-red-600 hover:border-red-300 hover:bg-red-50 hover:text-red-700 transition"
                        >
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="1.5"
                            class="h-5 w-5"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              d="M6 18L18 6M6 6l12 12"
                            />
                          </svg>
                        </button>
                      </form>
                    </div>
                  </div>
                </div>
              ) : (
                <div class="p-6 flex items-center justify-center">
                  <a
                    href={`/recipes?day=${day}`}
                    class="inline-flex h-12 w-12 items-center justify-center rounded-full bg-blue-600 text-white shadow-sm transition hover:bg-blue-700"
                    title="Choisir une recette"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      class="h-6 w-6"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="M12 4.5v15m7.5-7.5h-15"
                      />
                    </svg>
                  </a>
                </div>
              )}
            </section>
          );
        })
      }
    </div>
  </div>

  <script type="module">
    // Enable drag & drop reassignment between planning days.
    const initPlanningDnD = () => {
      const dropzones = Array.from(
        document.querySelectorAll(".js-planning-dropzone"),
      );
      const draggables = Array.from(
        document.querySelectorAll(".js-planning-draggable"),
      );
      let dragPayload = null;

      const DROP_HIGHLIGHT_CLASSES = [
        "ring-2",
        "ring-emerald-400",
        "ring-offset-2",
        "ring-offset-white",
      ];

      const highlightDropzone = (zone) => {
        zone.classList.add(...DROP_HIGHLIGHT_CLASSES);
      };

      const removeDropHighlight = (zone) => {
        zone.classList.remove(...DROP_HIGHLIGHT_CLASSES);
      };

      const clearDropHighlights = () => {
        dropzones.forEach(removeDropHighlight);
      };

      const resetDragState = () => {
        dragPayload = null;
        clearDropHighlights();
      };

      const performAssignment = async (zone, payload) => {
        if (!payload) {
          resetDragState();
          return;
        }

        const toDay = (zone.dataset.day || "").trim();
        const currentId = (zone.dataset.currentRecipeId || "").trim();
        const { day: fromDay, recipeId } = payload;
        const sourceDay = (fromDay || "").trim();

        if (!toDay || !recipeId || !sourceDay) {
          resetDragState();
          return;
        }
        if (toDay === sourceDay || currentId === recipeId) {
          resetDragState();
          return;
        }

        zone.classList.add("opacity-60");

        try {
          const res = await fetch("/api/move-recipe", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              fromDay: sourceDay,
              toDay,
              recipeId,
              replaceWith: currentId || null,
            }),
          });

          if (!res.ok) throw new Error("move failed");
          window.location.reload();
        } catch (err) {
          console.error("D√©placement impossible", err);
          alert("Impossible de d√©placer la recette. Merci de r√©essayer.");
        } finally {
          zone.classList.remove("opacity-60");
          resetDragState();
        }
      };

      const findDropzoneAt = (clientX, clientY) => {
        const el = document.elementFromPoint(clientX, clientY);
        if (!el) return null;
        return (
          dropzones.find((zone) => zone === el || zone.contains(el)) || null
        );
      };

      const maxTouchPoints =
        typeof navigator !== "undefined" ? navigator.maxTouchPoints || 0 : 0;
      const isTouchCapable =
        typeof window !== "undefined" &&
        ("ontouchstart" in window ||
          maxTouchPoints > 0 ||
          (window.matchMedia &&
            window.matchMedia("(pointer: coarse)").matches));

      draggables.forEach((el) => {
        el.addEventListener("dragstart", (event) => {
          const day = el.dataset.day;
          const recipeId = el.dataset.recipeId;
          if (!day || !recipeId) {
            event.preventDefault();
            return;
          }
          dragPayload = { day, recipeId };
          el.classList.add("opacity-60");
          if (event.dataTransfer) {
            event.dataTransfer.effectAllowed = "move";
            try {
              event.dataTransfer.setData(
                "application/json",
                JSON.stringify(dragPayload),
              );
            } catch (_) {
              event.dataTransfer.setData("text/plain", recipeId);
            }
          }
        });

        el.addEventListener("dragend", () => {
          el.classList.remove("opacity-60");
          resetDragState();
        });

        if (!isTouchCapable) {
          return;
        }

        el.style.touchAction = "none";

        el.addEventListener("pointerdown", (event) => {
          if (event.pointerType !== "touch") return;
          if (event.target && event.target.closest("a, button")) return;

          const day = el.dataset.day;
          const recipeId = el.dataset.recipeId;
          if (!day || !recipeId) return;

          event.preventDefault();

          dragPayload = { day, recipeId };
          el.classList.add("opacity-60");

          const rect = el.getBoundingClientRect();
          const offsetX = event.clientX - rect.left;
          const offsetY = event.clientY - rect.top;

          const ghost = el.cloneNode(true);
          ghost.style.position = "fixed";
          ghost.style.top = `${rect.top}px`;
          ghost.style.left = `${rect.left}px`;
          ghost.style.width = `${rect.width}px`;
          ghost.style.pointerEvents = "none";
          ghost.style.zIndex = "9999";
          ghost.style.transform = "translate3d(0, 0, 0)";
          ghost.classList.add(
            "shadow-lg",
            "ring-1",
            "ring-emerald-200",
            "bg-white",
          );
          document.body.appendChild(ghost);

          let activeZone = null;

          const updateGhostPosition = (clientX, clientY) => {
            ghost.style.transform = `translate3d(${clientX - offsetX}px, ${
              clientY - offsetY
            }px, 0)`;
          };

          updateGhostPosition(event.clientX, event.clientY);

          const pointerId = event.pointerId;

          const handleMove = (moveEvent) => {
            if (moveEvent.pointerId !== pointerId) return;
            moveEvent.preventDefault();
            updateGhostPosition(moveEvent.clientX, moveEvent.clientY);
            const zone = findDropzoneAt(moveEvent.clientX, moveEvent.clientY);
            if (zone !== activeZone) {
              if (activeZone) removeDropHighlight(activeZone);
              activeZone = zone;
              if (activeZone) highlightDropzone(activeZone);
            }
          };

          const finishDrag = (finalEvent, shouldDrop) => {
            if (finalEvent.pointerId !== pointerId) return;
            finalEvent.preventDefault();
            document.removeEventListener("pointermove", handleMove);
            document.removeEventListener("pointerup", onPointerUp);
            document.removeEventListener("pointercancel", onPointerCancel);
            ghost.remove();
            el.classList.remove("opacity-60");
            if (activeZone && shouldDrop) {
              const target = activeZone;
              activeZone = null;
              void performAssignment(target, dragPayload);
            } else {
              if (activeZone) removeDropHighlight(activeZone);
              resetDragState();
            }
          };

          const onPointerUp = (upEvent) => finishDrag(upEvent, true);
          const onPointerCancel = (cancelEvent) =>
            finishDrag(cancelEvent, false);

          document.addEventListener("pointermove", handleMove, {
            passive: false,
          });
          document.addEventListener("pointerup", onPointerUp, {
            passive: false,
          });
          document.addEventListener("pointercancel", onPointerCancel, {
            passive: false,
          });
        });
      });

      dropzones.forEach((zone) => {
        zone.addEventListener("dragenter", (event) => {
          if (!dragPayload) return;
          event.preventDefault();
          highlightDropzone(zone);
        });

        zone.addEventListener("dragover", (event) => {
          if (!dragPayload) return;
          event.preventDefault();
        });

        zone.addEventListener("dragleave", (event) => {
          if (!dragPayload) return;
          const related = event.relatedTarget;
          if (related && zone.contains(related)) return;
          removeDropHighlight(zone);
        });

        zone.addEventListener("drop", (event) => {
          if (!dragPayload) return;
          event.preventDefault();
          removeDropHighlight(zone);
          void performAssignment(zone, dragPayload);
        });
      });
    };

    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initPlanningDnD, {
        once: true,
      });
    } else {
      initPlanningDnD();
    }
  </script>
</Layout>
