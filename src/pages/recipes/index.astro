---
import Layout from "../../layouts/Layout.astro";
import { db } from "../../firebase";
import { collection, getDocs } from "firebase/firestore";

const snap = await getDocs(collection(db, "recipes"));
const recipes = snap.docs.map((d) => ({ id: d.id, ...(d.data() as any) }));

const DEFAULT_IMG = "/images/default-recipe.jpg";
const RECIPES_ENC = encodeURIComponent(JSON.stringify(recipes));
---

<Layout title="Recettes">
  <div class="mx-auto max-w-6xl px-4 py-8">
    <!-- Barre titre + actions -->
    <div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
      <h1 class="text-2xl font-bold text-gray-900 text-center sm:text-left">📖 Recettes disponibles</h1>

      <div class="flex items-center gap-2 justify-center">
        <button
          id="openAddModal"
          class="inline-flex items-center gap-2 rounded-lg bg-emerald-600 px-3 py-2 text-white text-sm font-medium shadow hover:bg-emerald-700 active:scale-[0.98] transition"
        >
          ➕ Ajouter une recette
        </button>
      </div>
    </div>

    <!-- Barre de filtres -->
    <div class="mt-5 flex flex-col sm:flex-row gap-3 sm:gap-4 sm:items-center sm:justify-between">
      <div class="w-full sm:max-w-md">
        <input
          id="searchInput"
          type="text"
          placeholder="Rechercher une recette…"
          class="w-full rounded-lg border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400"
        />
      </div>

      <div class="flex w-full sm:w-auto items-center gap-4">
        <div class="flex items-center gap-2">
          <label for="saltFilter" class="text-sm text-gray-700">Type</label>
          <select
            id="saltFilter"
            class="rounded-lg border border-gray-300 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-400"
          >
            <option value="all">Tous</option>
            <option value="salty">Salé</option>
            <option value="sweet">Sucré</option>
          </select>
        </div>

        <label class="inline-flex items-center gap-2 select-none">
          <input id="mamanFilter" type="checkbox" class="h-5 w-5 rounded border-gray-300 text-blue-600 focus:ring-2 focus:ring-blue-400" />
          <span class="text-sm text-gray-800">Seulement recettes de maman</span>
        </label>
      </div>
    </div>

    <!-- Grille -->
    <div id="grid" class="mt-6 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"></div>

    <!-- Données encodées -->
    <div id="recipes-data" data-recipes={RECIPES_ENC} class="hidden"></div>
  </div>

  <!-- MODAL d’ajout -->
  <!-- MODIF: overflow-y-auto + overscroll-contain pour couper le scroll chaining -->
  <div id="addModal" class="fixed inset-0 z-50 hidden overflow-y-auto overscroll-contain">
    <div class="absolute inset-0 bg-black/40"></div>
    <!-- MODIF: max-h + overflow-y-auto pour scroller DANS la carte -->
    <div
      class="relative mx-auto my-8 max-w-2xl rounded-2xl bg-white p-5 shadow-xl max-h-[calc(100dvh-4rem)] overflow-y-auto"
      role="dialog" aria-modal="true" aria-labelledby="addRecipeTitle"
    >
      <div class="flex items-center justify-between mb-3">
        <h2 id="addRecipeTitle" class="text-lg font-semibold text-gray-900">Ajouter une recette</h2>
        <button id="closeAddModal" class="rounded-md p-2 hover:bg-gray-100" aria-label="Fermer">✕</button>
      </div>

      <form id="addRecipeForm" class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Titre *</label>
          <input id="rTitle" type="text" class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-emerald-400" required />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Image (URL)</label>
          <input id="rImage" type="url" placeholder="https://…" class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-emerald-400" />
        </div>

        <!-- Booleans -->
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
          <label class="inline-flex items-center gap-2">
            <input id="rMaman" type="checkbox" class="h-5 w-5 rounded border-gray-300 text-emerald-600 focus:ring-2 focus:ring-emerald-400" />
            <span class="text-sm text-gray-800">Recette de maman</span>
          </label>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Type *</label>
            <select id="rSalt" class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-emerald-400">
              <option value="salty">Salé</option>
              <option value="sweet">Sucré</option>
            </select>
          </div>
        </div>

        <!-- Ingrédients -->
        <div>
          <div class="flex items-center justify-between mb-2">
            <label class="block text-sm font-medium text-gray-700">Ingrédients *</label>
            <button type="button" id="addIngRow" class="text-emerald-600 hover:text-emerald-700 text-sm">➕ Ajouter un ingrédient</button>
          </div>

          <div id="ingList" class="space-y-2">
            <!-- lignes ajoutées en JS -->
          </div>
        </div>

        <!-- Étapes -->
        <div>
          <div class="flex items-center justify-between mb-2">
            <label class="block text-sm font-medium text-gray-700">Étapes *</label>
            <button type="button" id="addStepRow" class="text-emerald-600 hover:text-emerald-700 text-sm">➕ Ajouter une étape</button>
          </div>

          <div id="stepsList" class="space-y-2">
            <!-- lignes ajoutées en JS -->
          </div>
        </div>

        <div class="flex items-center justify-end gap-3 pt-2">
          <button type="button" id="cancelAdd" class="rounded-lg border border-gray-300 px-4 py-2 text-sm hover:bg-gray-50">Annuler</button>
          <button type="submit" class="inline-flex items-center gap-2 rounded-lg bg-emerald-600 px-4 py-2 text-sm font-medium text-white hover:bg-emerald-700 active:scale-[0.98] transition">
            Enregistrer
          </button>
        </div>

        <p id="addStatus" class="text-sm text-gray-500 mt-1"></p>
      </form>
    </div>
  </div>

  <script is:inline>
    document.addEventListener("DOMContentLoaded", () => {
      const DEFAULT_IMG = "/images/default-recipe.jpg";

      // Données
      const dataEl = document.getElementById("recipes-data");
      const enc = dataEl?.getAttribute("data-recipes") || "";
      /** @type {{id:string,title:string,image?:string,maman?:boolean,salt?:boolean}[]} */
      let ALL = [];
      try { ALL = JSON.parse(decodeURIComponent(enc)) || []; }
      catch (e) { console.error("Erreur de décodage des recettes:", e); ALL = []; }

      // UI
      const grid = document.getElementById("grid");
      const searchInput = document.getElementById("searchInput");
      const mamanFilter = document.getElementById("mamanFilter");
      const saltFilter = document.getElementById("saltFilter");

      // Param depuis planning : /recipes?day=lundi
      const params = new URLSearchParams(window.location.search);
      const dayParam = (params.get("day") || "").toLowerCase();

      const normalize = (s) =>
        String(s || "").normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase().trim();

      function makeBadge(text, cls) {
        const span = document.createElement("span");
        span.className = `inline-flex items-center gap-1 rounded-full px-2 py-0.5 border ${cls}`;
        span.textContent = text;
        return span;
      }

      function makeCard(r) {
        // Carte cliquable
        const card = document.createElement("div");
        card.className = "group relative flex flex-col rounded-xl border border-gray-200 bg-white shadow-sm hover:shadow-md transition overflow-hidden cursor-pointer";
        card.addEventListener("click", () => {
          const q = dayParam ? `?day=${encodeURIComponent(dayParam)}` : "";
          window.location.href = `/recipes/${r.id}${q}`;
        });

        // ➕ en haut-droite si dayParam
        if (dayParam) {
          const addBtn = document.createElement("button");
          addBtn.type = "button";
          addBtn.className =
            "absolute right-2 top-2 z-10 inline-flex h-9 w-9 items-center justify-center rounded-full bg-white/90 " +
            "text-green-600 ring-1 ring-green-200 shadow hover:bg-white hover:text-green-700 hover:ring-green-300 transition";
          addBtn.title = `Ajouter au ${dayParam}`;
          addBtn.setAttribute("aria-label", `Ajouter "${r.title}" au ${dayParam}`);
          addBtn.innerHTML =
            '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">' +
            '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16M20 12H4" />' +
            '</svg>';
          addBtn.addEventListener("click", async (e) => {
            e.stopPropagation();
            e.preventDefault();
            try {
              const res = await fetch("/api/assign-recipe", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ day: dayParam, id: r.id }),
              });
              if (!res.ok) throw new Error("assign failed");
              window.location.href = "/"; // ta page planning
            } catch (err) {
              console.error("Assignation échouée:", err);
              alert("Impossible d’ajouter la recette au planning.");
            }
          });
          card.appendChild(addBtn);
        }

        // Image
        const imgWrap = document.createElement("div");
        imgWrap.className = "aspect-[4/3] w-full overflow-hidden bg-gray-100";
        const img = document.createElement("img");
        img.loading = "lazy";
        img.className = "h-full w-full object-cover group-hover:scale-[1.03] transition-transform duration-300";
        img.src = r.image || DEFAULT_IMG;
        img.alt = r.title || "";
        img.onerror = () => { img.src = DEFAULT_IMG; };
        imgWrap.appendChild(img);
        card.appendChild(imgWrap);

        // Corps
        const body = document.createElement("div");
        body.className = "flex-1 flex flex-col p-3";

        const title = document.createElement("span");
        title.className = "text-sm font-semibold text-gray-900 line-clamp-2 group-hover:underline";
        title.textContent = r.title || "";
        body.appendChild(title);

        const meta = document.createElement("div");
        meta.className = "mt-2 text-xs text-gray-500 flex items-center gap-2";
        if (r.maman === true) {
          meta.appendChild(makeBadge("Recette de maman", "border-pink-300 text-pink-700 bg-pink-50"));
        }
        if (typeof r.salt === "boolean") {
            meta.appendChild(makeBadge(r.salt ? "Salé" : "Sucré", "border-gray-200 text-gray-600"));
        }
        body.appendChild(meta);

        card.appendChild(body);
        return card;
      }

      function render(list) {
        grid.innerHTML = "";
        if (!Array.isArray(list) || list.length === 0) {
          const empty = document.createElement("div");
          empty.className = "col-span-full text-center text-gray-500";
          empty.textContent = "Aucune recette ne correspond à votre recherche.";
          grid.appendChild(empty);
          return;
        }
        list.forEach((r) => grid.appendChild(makeCard(r)));
      }

      function apply() {
        const q = normalize(searchInput.value);
        const mamanOnly = mamanFilter.checked;
        const mode = saltFilter.value; // all | salty | sweet

        let list = ALL.filter((r) => normalize(r.title).includes(q));
        if (mamanOnly) list = list.filter((r) => r.maman === true);
        if (mode === "salty") list = list.filter((r) => r.salt === true);
        else if (mode === "sweet") list = list.filter((r) => r.salt === false);

        list.sort((a, b) => a.title.localeCompare(b.title, "fr"));
        render(list);
      }

      searchInput.addEventListener("input", apply);
      mamanFilter.addEventListener("change", apply);
      saltFilter.addEventListener("change", apply);

      apply();

      // ---------- Modal d’ajout ----------
      const addModal = document.getElementById("addModal");
      const openAddModal = document.getElementById("openAddModal");
      const closeAddModal = document.getElementById("closeAddModal");
      const cancelAdd = document.getElementById("cancelAdd");
      const addRecipeForm = document.getElementById("addRecipeForm");
      const addStatus = document.getElementById("addStatus");

      const rTitle = document.getElementById("rTitle");
      const rImage = document.getElementById("rImage");
      const rMaman = document.getElementById("rMaman");
      const rSalt = document.getElementById("rSalt");
      const ingList = document.getElementById("ingList");
      const addIngRow = document.getElementById("addIngRow");
      const stepsList = document.getElementById("stepsList");
      const addStepRow = document.getElementById("addStepRow");

      // MODIF: lock/unlock body pour empêcher le scroll de fond
      function lockBody() {
        document.body.classList.add("overflow-hidden", "overscroll-none", "body-locked");
      }
      function unlockBody() {
        document.body.classList.remove("overflow-hidden", "overscroll-none", "body-locked");
      }

      function openModal() {
        addModal.classList.remove("hidden");
        lockBody(); // MODIF
      }
      function closeModal() {
        addModal.classList.add("hidden");
        addStatus.textContent = "";
        unlockBody(); // MODIF
      }

      openAddModal.addEventListener("click", () => {
        // reset formulaire
        addRecipeForm.reset();
        ingList.innerHTML = "";
        stepsList.innerHTML = "";
        addIngredientRow();
        addStep();
        openModal();
      });

      closeAddModal.addEventListener("click", closeModal);
      cancelAdd.addEventListener("click", (e) => { e.preventDefault(); closeModal(); });

      // clic sur l'overlay (le premier enfant est le backdrop noir)
      addModal.addEventListener("click", (e) => {
        if (e.target === addModal.firstElementChild) closeModal();
      });

      function addIngredientRow(values = { item: "", quantity: "", unit: "" }) {
        const row = document.createElement("div");
        row.className = "ingredient-row grid grid-cols-6 gap-2";
        row.innerHTML = `
          <input type="text" placeholder="Ingrédient" class="col-span-3 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-emerald-400" value="${values.item || ""}" required>
          <input type="number" step="any" placeholder="Qté" class="col-span-2 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-emerald-400" value="${values.quantity ?? ""}">
          <input type="text" placeholder="Unité" class="col-span-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-emerald-400" value="${values.unit || ""}">
        `;
        ingList.appendChild(row);
      }

      function addStep(value = "") {
        const row = document.createElement("div");
        row.className = "step-row";
        row.innerHTML = `
          <input type="text" placeholder="Décrire l’étape…" class="w-full rounded-lg border border-gray-300 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-emerald-400" value="${value}">
        `;
        stepsList.appendChild(row);
      }

      addIngRow.addEventListener("click", () => addIngredientRow());
      addStepRow.addEventListener("click", () => addStep());

      addRecipeForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        addStatus.textContent = "Enregistrement…";

        // Récup ingrédients
        const ingRows = Array.from(ingList.querySelectorAll(".ingredient-row"));
        const ingredients = ingRows.map((row) => {
          const [itemEl, qtyEl, unitEl] = row.querySelectorAll("input");
          const item = itemEl.value.trim();
          const qRaw = qtyEl.value.trim();
          const quantity = qRaw === "" ? undefined : Number(qRaw);
          const unit = unitEl.value.trim();
          if (!item) return null;
          const obj = { item };
          if (Number.isFinite(quantity)) obj.quantity = quantity;
          if (unit) obj.unit = unit;
          return obj;
        }).filter(Boolean);

        // Récup étapes
        const stepRows = Array.from(stepsList.querySelectorAll(".step-row input"));
        const steps = stepRows.map(el => el.value.trim()).filter(Boolean);

        // salt: "salty" => true ; "sweet" => false
        const salt = (rSalt.value === "salty");

        const payload = {
          title: rTitle.value.trim(),
          image: rImage.value.trim(),
          maman: !!rMaman.checked,
          salt,
          ingredients,
          steps,
        };

        try {
          const res = await fetch("/api/add-recipe", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload),
          });
          if (!res.ok) {
            const txt = await res.text().catch(() => "");
            throw new Error("HTTP " + res.status + " " + txt);
          }
          const data = await res.json().catch(() => ({}));
          addStatus.textContent = "✅ Recette ajoutée";
          // rechargement pour voir la nouvelle recette
          setTimeout(() => {
            window.location.reload();
          }, 400);
        } catch (err) {
          console.error(err);
          addStatus.textContent = "❌ Erreur lors de l'ajout";
        }
      });
    });
  </script>

  <!-- MODIF (optionnel): évite le "saut" horizontal quand on lock le body -->
  <style is:global>
    body.body-locked { padding-right: calc(100vw - 100%); }
  </style>
</Layout>
