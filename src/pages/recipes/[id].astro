---
// src/pages/recipes/[id].astro
import Layout from "../../layouts/Layout.astro";
import Modal from "../../components/Modal.astro";
import { db } from "../../firebase";
import { doc, getDoc } from "firebase/firestore";

const { id } = Astro.params;

const recipe = await (async () => {
  try {
    const ref = doc(db, "recipes", id);
    const snap = await getDoc(ref);
    if (!snap.exists()) return null;
    return { id: snap.id, ...snap.data() };
  } catch {
    return null;
  }
})();

const DEFAULT_IMG = "/images/default-recipe.jpg";
---

<Layout title={recipe?.title || "Recette"}>
  <div class="container mx-auto px-4 py-12">
    {
      recipe ? (
        <>
          <div class="relative">
            <div class="overflow-hidden rounded-xl shadow-lg mb-8">
              <img
                src={recipe.image || DEFAULT_IMG}
                alt={recipe.title}
                class="w-full h-72 object-cover transform hover:scale-105 transition duration-500"
                onerror={`this.src='${DEFAULT_IMG}'`}
              />
            </div>
            <div id="addBtnContainer" class="absolute right-4 top-4" />
          </div>

          <div class="flex items-start justify-between gap-4 mb-6">
            <h1 class="text-3xl md:text-4xl font-extrabold text-gray-900">
              {recipe.title}
            </h1>
            <div class="flex items-center gap-2">
              <button id="openEdit" class="inline-flex items-center gap-2 rounded-lg border border-gray-200 bg-white px-3 py-2 text-sm font-medium text-gray-800 shadow-sm hover:bg-gray-50 transition">Modifier</button>
              <button id="deleteRecipe" class="inline-flex items-center gap-2 rounded-lg bg-rose-600 px-3 py-2 text-sm font-medium text-white shadow hover:bg-rose-700 transition">Supprimer</button>
            </div>
          </div>

          <div class="grid gap-8 md:grid-cols-2">
            <section class="bg-yellow-50 rounded-xl p-6 shadow-lg hover:shadow-2xl transition">
              <h2 class="flex items-center text-2xl font-semibold mb-4 text-yellow-800">
                <span class="mr-2">üõí</span> Ingr√©dients
              </h2>
              <ul class="list-disc list-inside space-y-2 text-gray-700">
                {recipe.ingredients.map((i) => (
                  <li>
                    {typeof i === "object" && i.quantity
                      ? `${i.item}: ${i.quantity} ${i.unit || ""}`
                      : typeof i === "object"
                        ? i.item
                        : i}
                  </li>
                ))}
              </ul>
            </section>

            <section class="bg-green-50 rounded-xl p-6 shadow-lg hover:shadow-2xl transition">
              <h2 class="flex items-center text-2xl font-semibold mb-4 text-green-800">
                <span class="mr-2">üë©‚Äçüç≥</span> Pr√©paration
              </h2>
              <ol class="list-decimal list-inside space-y-2 text-gray-700">
                {recipe.steps.map((s) => (<li>{s}</li>))}
              </ol>
            </section>
          </div>

          <div class="mt-12 text-center">
            <a href="/recipes" class="inline-block bg-blue-500 hover:bg-blue-600 text-white font-medium py-3 px-6 rounded-xl shadow-lg transition transform hover:-translate-y-1">
              ‚Üê Retour √† toutes les recettes
            </a>
          </div>

          <div
            id="recipe-data"
            data-id={recipe.id}
            data-title={recipe.title}
            data-image={recipe.image || ""}
            data-ingredients={encodeURIComponent(JSON.stringify(recipe.ingredients || []))}
            data-steps={encodeURIComponent(JSON.stringify(recipe.steps || []))}
            data-maman={String(!!recipe.maman)}
            data-salt={String(!!recipe.salt)}
            class="hidden"
          />

          <!-- Modale d‚Äô√©dition -->
          <Modal id="editModal" title="Modifier la recette">
            <form id="editRecipeForm" class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Titre *</label>
                <input id="eTitle" type="text" class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-emerald-400" required />
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Image (URL)</label>
                <input id="eImage" type="url" placeholder="https://‚Ä¶" class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-emerald-400" />
              </div>

              <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                <label class="inline-flex items-center gap-2">
                  <input id="eMaman" type="checkbox" class="h-5 w-5 rounded border-gray-300 text-emerald-600 focus:ring-2 focus:ring-emerald-400" />
                  <span class="text-sm text-gray-800">Recette de maman</span>
                </label>

                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">Type *</label>
                  <select id="eSalt" class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-emerald-400">
                    <option value="salty">Sal√©</option>
                    <option value="sweet">Sucr√©</option>
                  </select>
                </div>
              </div>

              <div>
                <div class="flex items-center justify-between mb-2">
                  <label class="block text-sm font-medium text-gray-700">Ingr√©dients *</label>
                  <button type="button" id="addIngRow" class="text-emerald-600 hover:text-emerald-700 text-sm">‚ûï Ajouter un ingr√©dient</button>
                </div>
                <div id="ingList" class="space-y-2"></div>
              </div>

              <div>
                <div class="flex items-center justify-between mb-2">
                  <label class="block text-sm font-medium text-gray-700">√âtapes *</label>
                  <div class="flex items-center gap-3">
                    <span class="text-xs text-gray-500">Glisser/D√©poser pour r√©ordonner</span>
                    <button type="button" id="addStepRow" class="text-emerald-600 hover:text-emerald-700 text-sm">‚ûï Ajouter une √©tape</button>
                  </div>
                </div>
                <div id="stepsList" class="space-y-2"></div>
              </div>

              <div class="flex items-center justify-between gap-3 pt-2">
                <button type="button" id="cancelEdit" class="rounded-lg border border-gray-300 px-4 py-2 text-sm hover:bg-gray-50">Annuler</button>
                <div class="flex items-center gap-3">
                  <button type="button" id="dangerDelete" class="inline-flex items-center gap-2 rounded-lg bg-rose-600 px-4 py-2 text-sm font-medium text-white hover:bg-rose-700 transition">Supprimer la recette</button>
                  <button type="submit" class="inline-flex items-center gap-2 rounded-lg bg-emerald-600 px-4 py-2 text-sm font-medium text-white hover:bg-emerald-700 active:scale-[0.98] transition">Enregistrer</button>
                </div>
              </div>
              <p id="editStatus" class="text-sm text-gray-500 mt-1"></p>
            </form>
          </Modal>
        </>
      ) : (
        <p class="text-center text-gray-500">Recette introuvable.</p>
      )
    }
  </div>

  <script is:inline>
    document.addEventListener("DOMContentLoaded", () => {
      // + depuis le planning
      const params = new URLSearchParams(window.location.search);
      const dayParam = (params.get("day") || "").toLowerCase();
      const addBtnContainer = document.getElementById("addBtnContainer");
      const dataEl = document.getElementById("recipe-data");
      const recipeId = dataEl ? dataEl.getAttribute("data-id") : null;

      if (dayParam && recipeId) {
        const btn = document.createElement("button");
        btn.type = "button";
        btn.className = "inline-flex h-10 w-10 items-center justify-center rounded-full bg-white/90 text-green-600 ring-1 ring-green-200 shadow hover:bg-white hover:text-green-700 hover:ring-green-300 transition";
        btn.title = `Ajouter au ${dayParam}`;
        btn.setAttribute("aria-label", `Ajouter cette recette au ${dayParam}`);
        btn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16M20 12H4" /></svg>';
        btn.addEventListener("click", async () => {
          try {
            const res = await fetch("/api/assign-recipe", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ day: dayParam, id: recipeId }) });
            if (!res.ok) throw new Error("assign failed");
            window.location.href = "/";
          } catch (err) {
            console.error("Assignation √©chou√©e:", err);
            alert("Impossible d‚Äôajouter la recette au planning.");
          }
        });
        addBtnContainer.appendChild(btn);
      }

      // Modale √©dition + lock scroll
      const editModal  = document.getElementById("editModal");
      const openEdit   = document.getElementById("openEdit");
      const closeEdit  = document.getElementById("editModal-close");
      const cancelEdit = document.getElementById("cancelEdit");
      const editStatus = document.getElementById("editStatus");

      let __lockScrollY = 0;
      function lockBodyScroll() {
        __lockScrollY = window.scrollY || 0;
        document.body.style.position = "fixed";
        document.body.style.top = `-${__lockScrollY}px`;
        document.body.style.left = "0";
        document.body.style.right = "0";
        document.body.style.width = "100%";
      }
      function unlockBodyScroll() {
        const y = Math.abs(parseInt(document.body.style.top || "0", 10)) || 0;
        document.body.style.position = "";
        document.body.style.top = "";
        document.body.style.left = "";
        document.body.style.right = "";
        document.body.style.width = "";
        window.scrollTo(0, y);
      }
      function openModal() { editModal.classList.remove("hidden"); lockBodyScroll(); }
      function closeModal() { editModal.classList.add("hidden"); editStatus.textContent = ""; unlockBodyScroll(); }

      openEdit.addEventListener("click", () => { fillFormFromDataset(); openModal(); });
      closeEdit.addEventListener("click", closeModal);
      cancelEdit.addEventListener("click", (e) => { e.preventDefault(); closeModal(); });
      editModal.addEventListener("click", (e) => { if (e.target === editModal.firstElementChild) closeModal(); });

      // Form + DnD
      const eTitle   = document.getElementById("eTitle");
      const eImage   = document.getElementById("eImage");
      const eMaman   = document.getElementById("eMaman");
      const eSalt    = document.getElementById("eSalt");
      const ingList  = document.getElementById("ingList");
      const addIngRow= document.getElementById("addIngRow");
      const stepsList= document.getElementById("stepsList");
      const addStepRow = document.getElementById("addStepRow");

      function addIngredientRow(values = { item: "", quantity: "", unit: "" }) {
        const row = document.createElement("div");
        row.className = "ingredient-row grid grid-cols-7 gap-2";
        row.innerHTML = `
          <input type="text" placeholder="Ingr√©dient" class="col-span-3 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-emerald-400" value="${values.item || ""}" required>
          <input type="number" step="any" placeholder="Qt√©" class="col-span-2 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-emerald-400" value="${values.quantity ?? ""}">
          <input type="text" placeholder="Unit√©" class="col-span-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-emerald-400" value="${values.unit || ""}">
          <button type="button" class="col-span-1 rounded-md border border-gray-200 hover:bg-gray-100 text-gray-600 text-sm" title="Supprimer">‚úï</button>
        `;
        row.querySelector("button").addEventListener("click", () => row.remove());
        ingList.appendChild(row);
      }
      addIngRow.addEventListener("click", () => addIngredientRow());

      let dragSrc = null;
      function addStepRowEl(value = "") {
        const row = document.createElement("div");
        row.className = "step-row grid grid-cols-[auto_1fr_auto] items-center gap-2 bg-gray-50 rounded-lg px-2 py-2";
        row.setAttribute("draggable", "true");
        row.innerHTML = `
          <span class="cursor-grab select-none px-1" title="Glisser pour r√©ordonner">‚ãÆ‚ãÆ</span>
          <input type="text" placeholder="D√©crire l‚Äô√©tape‚Ä¶" class="w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-emerald-400" value="${value}">
          <button type="button" class="rounded-md border border-gray-200 hover:bg-gray-100 text-gray-600 text-sm px-2" title="Supprimer">‚úï</button>
        `;
        row.querySelector("button").addEventListener("click", () => row.remove());

        row.addEventListener("dragstart", (e) => { dragSrc = row; row.classList.add("opacity-60"); e.dataTransfer.effectAllowed = "move"; try{e.dataTransfer.setData("text/plain","step")}catch{}; });
        row.addEventListener("dragend", () => { dragSrc = null; row.classList.remove("opacity-60"); });
        row.addEventListener("dragover", (e) => { e.preventDefault(); e.dataTransfer.dropEffect = "move"; });
        row.addEventListener("drop", (e) => {
          e.preventDefault();
          if (!dragSrc || dragSrc === row) return;
          const rect = row.getBoundingClientRect();
          const before = e.clientY < rect.top + rect.height/2;
          if (before) stepsList.insertBefore(dragSrc, row);
          else stepsList.insertBefore(dragSrc, row.nextSibling);
        });

        stepsList.appendChild(row);
      }
      addStepRow.addEventListener("click", () => addStepRowEl());

      function fillFormFromDataset() {
        const d = document.getElementById("recipe-data");
        if (!d) return;
        eTitle.value = d.getAttribute("data-title") || "";
        eImage.value = d.getAttribute("data-image") || "";
        eMaman.checked = d.getAttribute("data-maman") === "true";
        eSalt.value = d.getAttribute("data-salt") === "true" ? "salty" : "sweet";

        ingList.innerHTML = "";
        let ing = [];
        try { ing = JSON.parse(decodeURIComponent(d.getAttribute("data-ingredients") || "")) || []; } catch { ing = []; }
        if (ing.length === 0) ing.push({ item: "", quantity: "", unit: "" });
        for (const row of ing) addIngredientRow({ item: row.item || "", quantity: typeof row.quantity === "number" ? row.quantity : "", unit: row.unit || "" });

        stepsList.innerHTML = "";
        let st = [];
        try { st = JSON.parse(decodeURIComponent(d.getAttribute("data-steps") || "")) || []; } catch { st = []; }
        if (st.length === 0) st.push("");
        for (const s of st) addStepRowEl(s);
      }

      const editForm = document.getElementById("editRecipeForm");
      editForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const editStatus = document.getElementById("editStatus");
        editStatus.textContent = "Enregistrement‚Ä¶";

        const ingRows = Array.from(ingList.querySelectorAll(".ingredient-row"));
        const ingredients = ingRows.map((row) => {
          const inputs = row.querySelectorAll("input");
          const item = inputs[0].value.trim();
          const qRaw = inputs[1].value.trim();
          const unit = inputs[2].value.trim();
          if (!item) return null;
          const obj = { item };
          if (qRaw !== "" && !isNaN(Number(qRaw))) obj.quantity = Number(qRaw);
          if (unit) obj.unit = unit;
          return obj;
        }).filter(Boolean);

        const stepInputs = Array.from(stepsList.querySelectorAll(".step-row input"));
        const steps = stepInputs.map((el) => el.value.trim()).filter(Boolean);

        try {
          const res = await fetch("/api/update-recipe", {
            method: "PATCH",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              id: recipeId,
              title: eTitle.value.trim(),
              image: eImage.value.trim(),
              maman: !!eMaman.checked,
              salt: eSalt.value === "salty",
              ingredients,
              steps,
            }),
          });
          if (!res.ok) throw new Error("HTTP " + res.status);
          editStatus.textContent = "‚úÖ Modifications enregistr√©es";
          setTimeout(() => window.location.reload(), 400);
        } catch (err) {
          console.error(err);
          editStatus.textContent = "‚ùå Erreur lors de l'enregistrement";
        }
      });

      // suppression
      const deleteTopBtn = document.getElementById("deleteRecipe");
      const deleteModalBtn = document.getElementById("dangerDelete");
      async function doDelete() {
        if (!recipeId) return;
        if (!confirm("Supprimer d√©finitivement cette recette ?")) return;
        try {
          const res = await fetch(`/api/delete-recipe?id=${encodeURIComponent(recipeId)}`, { method: "DELETE" });
          if (!res.ok) throw new Error("HTTP " + res.status);
          window.location.replace("/recipes");
        } catch (err) {
          console.error("delete error:", err);
          alert("Impossible de supprimer la recette.");
        }
      }
      deleteTopBtn.addEventListener("click", doDelete);
      deleteModalBtn.addEventListener("click", doDelete);
    });
  </script>

  <style is:global>
    body.body-locked { padding-right: calc(100vw - 100%); }
  </style>
</Layout>
