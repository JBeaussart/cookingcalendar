---
import Layout from "../../layouts/Layout.astro";
import { db } from "../../firebase";
import { doc, getDoc } from "firebase/firestore";

const { id } = Astro.params;

const recipe = await (async () => {
  try {
    const ref = doc(db, "recipes", id);
    const snap = await getDoc(ref);
    if (!snap.exists()) return null;
    return { id: snap.id, ...snap.data() };
  } catch (e) {
    console.error(e);
    return null;
  }
})();

const DEFAULT_IMG = "/images/default-recipe.jpg";
---

<Layout title={recipe?.title || "Recette"}>
  <div class="container mx-auto px-4 py-12">
    {recipe ? (
      <>
        <div class="relative">
          <div class="overflow-hidden rounded-xl shadow-lg mb-8">
            <img
              src={recipe.image || DEFAULT_IMG}
              alt={recipe.title}
              class="w-full h-72 object-cover transform hover:scale-105 transition duration-500"
              onerror={`this.src='${DEFAULT_IMG}'`}
            />
          </div>

          <!-- Le bouton sera inject√© ici si ?day=... -->
          <div id="addBtnContainer" class="absolute right-4 top-4"></div>
        </div>

        <h1 class="text-4xl md:text-5xl font-extrabold text-center mb-12 text-gray-900">
          {recipe.title}
        </h1>

        <div class="grid gap-8 md:grid-cols-2">
          <section class="bg-yellow-50 rounded-xl p-6 shadow-lg hover:shadow-2xl transition">
            <h2 class="flex items-center text-2xl font-semibold mb-4 text-yellow-800">
              <span class="mr-2">üõí</span> Ingr√©dients
            </h2>
            <ul class="list-disc list-inside space-y-2 text-gray-700">
              {recipe.ingredients.map((i) => (
                <li>
                  {typeof i === "object" && i.quantity
                    ? `${i.item}: ${i.quantity} ${i.unit || ""}`
                    : typeof i === "object"
                    ? i.item
                    : i}
                </li>
              ))}
            </ul>
          </section>

          <section class="bg-green-50 rounded-xl p-6 shadow-lg hover:shadow-2xl transition">
            <h2 class="flex items-center text-2xl font-semibold mb-4 text-green-800">
              <span class="mr-2">üë©‚Äçüç≥</span> Pr√©paration
            </h2>
            <ol class="list-decimal list-inside space-y-2 text-gray-700">
              {recipe.steps.map((s) => <li>{s}</li>)}
            </ol>
          </section>
        </div>

        <div class="mt-12 text-center">
          <a
            href="/recipes"
            class="inline-block bg-blue-500 hover:bg-blue-600 text-white font-medium py-3 px-6 rounded-xl shadow-lg transition transform hover:-translate-y-1"
          >
            ‚Üê Retour √† toutes les recettes
          </a>
        </div>

        <!-- Passe l'id au client proprement -->
        <div id="recipe-data" data-id={recipe.id} class="hidden"></div>
      </>
    ) : (
      <p class="text-center text-gray-500">Recette introuvable.</p>
    )}
  </div>

  <script is:inline>
    document.addEventListener("DOMContentLoaded", () => {
      const params = new URLSearchParams(window.location.search);
      const dayParam = (params.get("day") || "").toLowerCase();
      const addBtnContainer = document.getElementById("addBtnContainer");
      const dataEl = document.getElementById("recipe-data");
      const recipeId = dataEl ? dataEl.getAttribute("data-id") : null;

      // Debug utile
      console.log("[detail] dayParam =", dayParam);
      console.log("[detail] recipeId =", recipeId);

      if (!dayParam || !recipeId) return; // pas de bouton si pas de contexte planning

      const btn = document.createElement("button");
      btn.type = "button";
      btn.className =
        "inline-flex h-10 w-10 items-center justify-center rounded-full bg-white/90 " +
        "text-green-600 ring-1 ring-green-200 shadow hover:bg-white hover:text-green-700 hover:ring-green-300 transition";
      btn.title = `Ajouter au ${dayParam}`;
      btn.setAttribute("aria-label", `Ajouter cette recette au ${dayParam}`);
      btn.innerHTML =
        '<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 24 24" fill="none" stroke="currentColor">' +
        '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16M20 12H4" />' +
        "</svg>";

      btn.addEventListener("click", async () => {
        try {
          console.log("[detail] POST /api/assign-recipe", { day: dayParam, id: recipeId });
          const res = await fetch("/api/assign-recipe", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ day: dayParam, id: recipeId }),
          });
          console.log("[detail] response status =", res.status);
          if (!res.ok) {
            const txt = await res.text().catch(() => "");
            console.warn("[detail] response not ok, body =", txt);
            throw new Error("HTTP " + res.status);
          }
          window.location.href = "/"; // ta page planning
        } catch (err) {
          console.error("Assignation √©chou√©e:", err);
          alert("Impossible d‚Äôajouter la recette au planning.");
        }
      });

      addBtnContainer.appendChild(btn);
    });
  </script>
</Layout>
