import { c as createComponent, i as renderComponent, r as renderTemplate, m as maybeRenderHead } from '../chunks/astro/server_B-OLKkAn.mjs';
import 'kleur/colors';
import { $ as $$Layout } from '../chunks/Layout_DTQF2n2m.mjs';
export { renderers } from '../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$ShoppingList = createComponent(async ($$result, $$props, $$slots) => {
  return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": "Liste de courses (planning + custom)" }, { "default": async ($$result2) => renderTemplate(_a || (_a = __template([" ", '<div class="mx-auto max-w-3xl px-4 py-6"> <div class="mb-6 flex items-center justify-between"> <h1 class="text-2xl font-bold text-gray-900">\u{1F6D2} Liste de courses</h1> </div> <!-- Formulaire d\u2019ajout d\u2019un \xE9l\xE9ment custom --> <form id="addForm" class="mb-6 grid grid-cols-1 sm:grid-cols-3 gap-2"> <input id="fItem" type="text" placeholder="Nom" class="border rounded px-3 py-2 sm:col-span-2 focus:ring-2 focus:ring-emerald-400" required> <input id="fQty" type="number" step="any" placeholder="Quantit\xE9" class="border rounded px-3 py-2 focus:ring-2 focus:ring-emerald-400"> <button type="submit" class="rounded bg-emerald-600 px-3 py-2 text-white hover:bg-emerald-700 transition">\nAjouter\n</button> </form> <ul id="list" class="divide-y divide-gray-100 rounded-2xl border border-gray-200 bg-white shadow-sm"></ul> <p id="status" class="mt-3 text-sm text-gray-500"></p> </div> <script type="module">\n    const listEl = document.getElementById("list");\n    const statusEl = document.getElementById("status");\n    const btnReload = document.getElementById("btnReload");\n    const addForm = document.getElementById("addForm");\n    const fItem = document.getElementById("fItem");\n    const fQty = document.getElementById("fQty");\n\n    let computed = [];\n    let saved = [];\n    let customs = [];\n    let items = [];\n\n    const makeKey = (it) =>\n      `${String(it.item||"").trim().toLowerCase()}|||${String(it.unit||"").trim().toLowerCase()}`;\n\n    function sortItems() {\n      // Tri : non coch\xE9s en haut, coch\xE9s en bas\n      items.sort((a, b) => {\n        if (a.checked === b.checked) return a.item.localeCompare(b.item, "fr");\n        return a.checked ? 1 : -1;\n      });\n    }\n\n    function render() {\n      sortItems();\n      listEl.innerHTML = "";\n      if (!Array.isArray(items) || items.length === 0) {\n        listEl.innerHTML = `\n          <li class="px-6 py-10 text-center text-sm text-gray-600">\n            Liste vide\n          </li>`;\n        return;\n      }\n\n      items.forEach((row, idx) => {\n        const isCustom = row.source === "custom";\n        const hasQty = typeof row.quantity === "number" && !isNaN(row.quantity);\n        const txt = hasQty\n          ? `${row.item} : ${row.quantity}${row.unit ? " " + row.unit : ""}`\n          : row.item;\n\n        const li = document.createElement("li");\n        li.className =\n          "group flex items-center justify-between gap-3 px-4 py-3 sm:px-5 " +\n          "hover:bg-emerald-50/60 transition";\n\n        // Gauche : checkbox + libell\xE9\n        const left = document.createElement("label");\n        left.className = "flex items-center gap-3 cursor-pointer select-none flex-1";\n\n        const cb = document.createElement("input");\n        cb.type = "checkbox";\n        cb.dataset.idx = String(idx);\n        cb.checked = !!row.checked;\n        cb.className =\n          "peer h-5 w-5 shrink-0 rounded-md border-gray-300 " +\n          "text-emerald-600 focus:ring-2 focus:ring-emerald-400";\n\n        const text = document.createElement("span");\n        text.className =\n          "text-[15px] " + (cb.checked ? "line-through text-gray-400" : "text-gray-800");\n        text.textContent = txt;\n\n        left.appendChild(cb);\n        left.appendChild(text);\n\n        // Droite : actions\n        const right = document.createElement("div");\n        right.className = "flex items-center gap-2";\n\n        if (isCustom) {\n          const del = document.createElement("button");\n          del.type = "button";\n          del.className =\n            "del-btn rounded-md p-2 text-rose-600 hover:text-rose-700 " +\n            "hover:bg-rose-50 transition";\n          del.dataset.idx = String(idx);\n          del.title = "Supprimer";\n          del.innerHTML =\n            \'<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" \' +\n            \'viewBox="0 0 24 24" fill="none" stroke="currentColor">\' +\n            \'<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" \' +\n            \'d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6M9 7h6m1 0H8m8 0l-1-3H9L8 7" />\' +\n            "</svg>";\n          right.appendChild(del);\n        }\n\n        li.appendChild(left);\n        li.appendChild(right);\n        listEl.appendChild(li);\n      });\n\n      // Gestion des checkboxes\n      listEl.querySelectorAll(\'input[type="checkbox"]\').forEach(cb => {\n        cb.addEventListener("change", async () => {\n          const i = Number(cb.dataset.idx);\n          items[i].checked = cb.checked;\n          status("Enregistrement\u2026");\n\n          try {\n            if (items[i].source === "custom") {\n              await fetch("/api/custom-items", {\n                method: "PATCH",\n                headers: { "content-type": "application/json" },\n                body: JSON.stringify({\n                  item: items[i].item,\n                  checked: items[i].checked\n                })\n              });\n            } else {\n              const payload = items\n                .filter(it => it.source === "computed")\n                .map(({source, ...rest}) => rest);\n\n              await fetch("/api/save-shopping-totals", {\n                method: "POST",\n                headers: { "content-type": "application/json" },\n                body: JSON.stringify({ items: payload })\n              });\n            }\n            render();\n            status("\u2705 Sauvegard\xE9");\n          } catch (e) {\n            console.error(e);\n            status("\u274C Erreur d\'enregistrement");\n          }\n        });\n      });\n\n      // Suppression des custom\n      listEl.querySelectorAll(".del-btn").forEach(btn => {\n        btn.addEventListener("click", async () => {\n          const i = Number(btn.dataset.idx);\n          const it = items[i];\n          if (!it || it.source !== "custom") return;\n          status("Suppression\u2026");\n          try {\n            const params = new URLSearchParams({ item: it.item });\n            const r = await fetch(`/api/custom-items?${params.toString()}`, { method: "DELETE" });\n            await r.json();\n            await load();\n            status("\u2705 Supprim\xE9");\n          } catch (e) {\n            console.error(e);\n            status("\u274C Erreur de suppression");\n          }\n        });\n      });\n    }\n\n    function status(t) {\n      statusEl.textContent = t || "";\n    }\n\n    async function load() {\n      status("Chargement\u2026");\n      try {\n        const [r1, r2, r3] = await Promise.all([\n          fetch("/api/compute-shopping-totals"),\n          fetch("/api/save-shopping-totals"),\n          fetch("/api/custom-items"),\n        ]);\n        const [j1, j2, j3] = await Promise.all([r1.json(), r2.json(), r3.json()]);\n\n        computed = (Array.isArray(j1.items) ? j1.items : []).map(it => ({ ...it, source: "computed" }));\n        saved = Array.isArray(j2.items) ? j2.items : [];\n        customs = (Array.isArray(j3.items) ? j3.items : []).map(it => ({ ...it, source: "custom" }));\n\n        const idxByKey = new Map(computed.map((it, i) => [makeKey(it), i]));\n        computed = computed.map(it => ({ ...it, checked: false }));\n        for (const s of saved) {\n          const idx = idxByKey.get(makeKey(s));\n          if (idx != null) computed[idx].checked = !!s.checked;\n        }\n\n        items = [...computed, ...customs];\n\n        status("OK");\n        render();\n      } catch (e) {\n        console.error(e);\n        status("\u274C Erreur de chargement");\n      }\n    }\n\n    // Ajout custom\n    addForm.addEventListener("submit", async (e) => {\n      e.preventDefault();\n      const item = fItem.value.trim();\n      const qtyRaw = fQty.value.trim();\n      if (!item) return;\n\n      status("Ajout\u2026");\n      try {\n        const payload = { item };\n        if (qtyRaw !== "") payload.quantity = Number(qtyRaw);\n\n        await fetch("/api/custom-items", {\n          method: "POST",\n          headers: { "content-type": "application/json" },\n          body: JSON.stringify(payload),\n        });\n\n        fItem.value = ""; fQty.value = "";\n        await load();\n        status("\u2705 Ajout\xE9");\n      } catch (e) {\n        console.error(e);\n        status("\u274C Erreur d\'ajout");\n      }\n    });\n\n    await load();\n  <\/script> '], [" ", '<div class="mx-auto max-w-3xl px-4 py-6"> <div class="mb-6 flex items-center justify-between"> <h1 class="text-2xl font-bold text-gray-900">\u{1F6D2} Liste de courses</h1> </div> <!-- Formulaire d\u2019ajout d\u2019un \xE9l\xE9ment custom --> <form id="addForm" class="mb-6 grid grid-cols-1 sm:grid-cols-3 gap-2"> <input id="fItem" type="text" placeholder="Nom" class="border rounded px-3 py-2 sm:col-span-2 focus:ring-2 focus:ring-emerald-400" required> <input id="fQty" type="number" step="any" placeholder="Quantit\xE9" class="border rounded px-3 py-2 focus:ring-2 focus:ring-emerald-400"> <button type="submit" class="rounded bg-emerald-600 px-3 py-2 text-white hover:bg-emerald-700 transition">\nAjouter\n</button> </form> <ul id="list" class="divide-y divide-gray-100 rounded-2xl border border-gray-200 bg-white shadow-sm"></ul> <p id="status" class="mt-3 text-sm text-gray-500"></p> </div> <script type="module">\n    const listEl = document.getElementById("list");\n    const statusEl = document.getElementById("status");\n    const btnReload = document.getElementById("btnReload");\n    const addForm = document.getElementById("addForm");\n    const fItem = document.getElementById("fItem");\n    const fQty = document.getElementById("fQty");\n\n    let computed = [];\n    let saved = [];\n    let customs = [];\n    let items = [];\n\n    const makeKey = (it) =>\n      \\`\\${String(it.item||"").trim().toLowerCase()}|||\\${String(it.unit||"").trim().toLowerCase()}\\`;\n\n    function sortItems() {\n      // Tri : non coch\xE9s en haut, coch\xE9s en bas\n      items.sort((a, b) => {\n        if (a.checked === b.checked) return a.item.localeCompare(b.item, "fr");\n        return a.checked ? 1 : -1;\n      });\n    }\n\n    function render() {\n      sortItems();\n      listEl.innerHTML = "";\n      if (!Array.isArray(items) || items.length === 0) {\n        listEl.innerHTML = \\`\n          <li class="px-6 py-10 text-center text-sm text-gray-600">\n            Liste vide\n          </li>\\`;\n        return;\n      }\n\n      items.forEach((row, idx) => {\n        const isCustom = row.source === "custom";\n        const hasQty = typeof row.quantity === "number" && !isNaN(row.quantity);\n        const txt = hasQty\n          ? \\`\\${row.item} : \\${row.quantity}\\${row.unit ? " " + row.unit : ""}\\`\n          : row.item;\n\n        const li = document.createElement("li");\n        li.className =\n          "group flex items-center justify-between gap-3 px-4 py-3 sm:px-5 " +\n          "hover:bg-emerald-50/60 transition";\n\n        // Gauche : checkbox + libell\xE9\n        const left = document.createElement("label");\n        left.className = "flex items-center gap-3 cursor-pointer select-none flex-1";\n\n        const cb = document.createElement("input");\n        cb.type = "checkbox";\n        cb.dataset.idx = String(idx);\n        cb.checked = !!row.checked;\n        cb.className =\n          "peer h-5 w-5 shrink-0 rounded-md border-gray-300 " +\n          "text-emerald-600 focus:ring-2 focus:ring-emerald-400";\n\n        const text = document.createElement("span");\n        text.className =\n          "text-[15px] " + (cb.checked ? "line-through text-gray-400" : "text-gray-800");\n        text.textContent = txt;\n\n        left.appendChild(cb);\n        left.appendChild(text);\n\n        // Droite : actions\n        const right = document.createElement("div");\n        right.className = "flex items-center gap-2";\n\n        if (isCustom) {\n          const del = document.createElement("button");\n          del.type = "button";\n          del.className =\n            "del-btn rounded-md p-2 text-rose-600 hover:text-rose-700 " +\n            "hover:bg-rose-50 transition";\n          del.dataset.idx = String(idx);\n          del.title = "Supprimer";\n          del.innerHTML =\n            \'<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" \' +\n            \'viewBox="0 0 24 24" fill="none" stroke="currentColor">\' +\n            \'<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" \' +\n            \'d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6M9 7h6m1 0H8m8 0l-1-3H9L8 7" />\' +\n            "</svg>";\n          right.appendChild(del);\n        }\n\n        li.appendChild(left);\n        li.appendChild(right);\n        listEl.appendChild(li);\n      });\n\n      // Gestion des checkboxes\n      listEl.querySelectorAll(\'input[type="checkbox"]\').forEach(cb => {\n        cb.addEventListener("change", async () => {\n          const i = Number(cb.dataset.idx);\n          items[i].checked = cb.checked;\n          status("Enregistrement\u2026");\n\n          try {\n            if (items[i].source === "custom") {\n              await fetch("/api/custom-items", {\n                method: "PATCH",\n                headers: { "content-type": "application/json" },\n                body: JSON.stringify({\n                  item: items[i].item,\n                  checked: items[i].checked\n                })\n              });\n            } else {\n              const payload = items\n                .filter(it => it.source === "computed")\n                .map(({source, ...rest}) => rest);\n\n              await fetch("/api/save-shopping-totals", {\n                method: "POST",\n                headers: { "content-type": "application/json" },\n                body: JSON.stringify({ items: payload })\n              });\n            }\n            render();\n            status("\u2705 Sauvegard\xE9");\n          } catch (e) {\n            console.error(e);\n            status("\u274C Erreur d\'enregistrement");\n          }\n        });\n      });\n\n      // Suppression des custom\n      listEl.querySelectorAll(".del-btn").forEach(btn => {\n        btn.addEventListener("click", async () => {\n          const i = Number(btn.dataset.idx);\n          const it = items[i];\n          if (!it || it.source !== "custom") return;\n          status("Suppression\u2026");\n          try {\n            const params = new URLSearchParams({ item: it.item });\n            const r = await fetch(\\`/api/custom-items?\\${params.toString()}\\`, { method: "DELETE" });\n            await r.json();\n            await load();\n            status("\u2705 Supprim\xE9");\n          } catch (e) {\n            console.error(e);\n            status("\u274C Erreur de suppression");\n          }\n        });\n      });\n    }\n\n    function status(t) {\n      statusEl.textContent = t || "";\n    }\n\n    async function load() {\n      status("Chargement\u2026");\n      try {\n        const [r1, r2, r3] = await Promise.all([\n          fetch("/api/compute-shopping-totals"),\n          fetch("/api/save-shopping-totals"),\n          fetch("/api/custom-items"),\n        ]);\n        const [j1, j2, j3] = await Promise.all([r1.json(), r2.json(), r3.json()]);\n\n        computed = (Array.isArray(j1.items) ? j1.items : []).map(it => ({ ...it, source: "computed" }));\n        saved = Array.isArray(j2.items) ? j2.items : [];\n        customs = (Array.isArray(j3.items) ? j3.items : []).map(it => ({ ...it, source: "custom" }));\n\n        const idxByKey = new Map(computed.map((it, i) => [makeKey(it), i]));\n        computed = computed.map(it => ({ ...it, checked: false }));\n        for (const s of saved) {\n          const idx = idxByKey.get(makeKey(s));\n          if (idx != null) computed[idx].checked = !!s.checked;\n        }\n\n        items = [...computed, ...customs];\n\n        status("OK");\n        render();\n      } catch (e) {\n        console.error(e);\n        status("\u274C Erreur de chargement");\n      }\n    }\n\n    // Ajout custom\n    addForm.addEventListener("submit", async (e) => {\n      e.preventDefault();\n      const item = fItem.value.trim();\n      const qtyRaw = fQty.value.trim();\n      if (!item) return;\n\n      status("Ajout\u2026");\n      try {\n        const payload = { item };\n        if (qtyRaw !== "") payload.quantity = Number(qtyRaw);\n\n        await fetch("/api/custom-items", {\n          method: "POST",\n          headers: { "content-type": "application/json" },\n          body: JSON.stringify(payload),\n        });\n\n        fItem.value = ""; fQty.value = "";\n        await load();\n        status("\u2705 Ajout\xE9");\n      } catch (e) {\n        console.error(e);\n        status("\u274C Erreur d\'ajout");\n      }\n    });\n\n    await load();\n  <\/script> '])), maybeRenderHead()) })}`;
}, "/Users/jeremy/code/JBeaussart/cookingcalendar/src/pages/shoppingList.astro", void 0);

const $$file = "/Users/jeremy/code/JBeaussart/cookingcalendar/src/pages/shoppingList.astro";
const $$url = "/shoppingList";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$ShoppingList,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
